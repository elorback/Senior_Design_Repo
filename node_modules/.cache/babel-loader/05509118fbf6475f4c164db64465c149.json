{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\elorb\\\\Desktop\\\\490repos\\\\CoolCats490\\\\squad-seek\\\\src\\\\pages\\\\GroupDetails.js\",\n    _s = $RefreshSig$();\n\nimport { useParams } from \"react-router\";\nimport axios from \"axios\"; //token stuff\n\nimport { useContext } from \"react\";\nimport AuthContext from \"../Store/auth-context\"; //react imports\n\nimport { useState, useEffect } from \"react\"; //Styling\n\nimport { Badge, Col, Row, Image, Container, Button, Modal, ListGroup } from \"react-bootstrap\"; //pic\n\nimport defaultPic from \"./Media/group-defualt.jpg\"; //Components\n\nimport GroupUpdate from \"../Components/groups/GroupUpdate\";\nimport GroupDelete from \"../Components/groups/GroupDelete\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst GroupDetails = props => {\n  _s();\n\n  //token stuff\n  const authCtx = useContext(AuthContext);\n  const isLogedIn = authCtx.isLoggedIn; //get the id from the url using params\n\n  const params = useParams(); //groups object and setter here\n\n  const [groups, setGroups] = useState([]); //use useState to store and set if the update group modals is shown\n\n  const [showUpdateModal, setShowUpdateModal] = useState(false); //use useState to store and set if the update group modals is shown\n\n  const [showDeleteModal, setShowDeleteModal] = useState(false); //use useState to store if the data is still being fetched from the server\n\n  const [isLoading, setLoading] = useState(true); //Use useState to store user info from server\n\n  const [userInfo, setUserInfo] = useState([]); //useEffect hook will load groups from data base when component is loaded\n\n  useEffect(() => {\n    //async call to database\n    const fetchGroups = async () => {\n      try {\n        const response = await axios(`http://localhost:5000/activities/${params.groupID}`); //store groups in groups object\n\n        setGroups(response.data);\n        setLoading(false);\n      } catch (err) {\n        console.log(err);\n      }\n    };\n\n    const fetchUser = async () => {\n      try {\n        const response = await axios.get(\"http://localhost:5000/users/me\", {\n          headers: {\n            \"Content-Type\": \"application/json\",\n            token: authCtx.token\n          }\n        }); //store user info in user object\n\n        setUserInfo(response.data);\n      } catch (err) {\n        console.log(err);\n      }\n    }; //Call async function\n\n\n    fetchGroups();\n    if (isLogedIn) fetchUser();\n  }, [params, isLogedIn, authCtx.token]); //if data is not loaded will retrun a blank page saying loading\n\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(Container, {\n      children: \"Data is Loading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 12\n    }, this);\n  }\n\n  const joinBtnHandler = event => {\n    let alreadyJoined = groups.members.find(x => x.id === userInfo._id);\n\n    if (!alreadyJoined) {\n      console.log(\"not in group\"); //get user stuff\n\n      let memberInfo = {\n        id: userInfo._id,\n        username: userInfo.username\n      };\n      groups.members.push(memberInfo);\n      const groupStuff = {\n        members: groups.members\n      };\n\n      try {\n        //http://localhost:5000/activities/join/:id\n        axios.post('http://localhost:5000/activities/join/' + groups._id, groupStuff).then(res => console.log(res.data));\n      } catch (err) {\n        console.log(err);\n      }\n    }\n  };\n\n  const isYourGroup = () => {\n    if (groups.createdBy != null && groups.createdBy === userInfo._id) {\n      return true;\n    } else {\n      return false;\n    }\n  }; //Date stuff\n\n\n  let date = new Date(parseInt(groups.time));\n  let month = date.toLocaleString(\"en-US\", {\n    month: \"long\"\n  });\n  let day = date.toLocaleString(\"en-US\", {\n    day: \"2-digit\"\n  });\n  let year = date.getFullYear();\n  let time = date.toLocaleTimeString(\"en-US\"); //console.log(\"group id \"+groups.createdBy)\n\n  console.log(groups);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Container, {\n      className: \"text-light bg-secondary\",\n      children: [/*#__PURE__*/_jsxDEV(Row, {\n        className: \"pt-4\",\n        children: [/*#__PURE__*/_jsxDEV(Col, {\n          children: /*#__PURE__*/_jsxDEV(Image, {\n            style: {\n              maxHeight: \"300px\",\n              maxWidth: \"500px\"\n            },\n            src: defaultPic,\n            rounded: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          children: /*#__PURE__*/_jsxDEV(\"section\", {\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Group Title:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 154,\n                columnNumber: 17\n              }, this), \" \", groups.name]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 153,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Group Type:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 160,\n                columnNumber: 17\n              }, this), \" \", parseInt(groups.type) ? \"Online\" : \"In Person\", \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 159,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Date:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 164,\n                columnNumber: 17\n              }, this), \" \", month + \" \" + day + \", \" + year + \" @ \" + time]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 163,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Description:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 168,\n                columnNumber: 17\n              }, this), \" \", groups.description]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 167,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Tags: \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 171,\n                columnNumber: 17\n              }, this), groups.tagsArray.map((e, index) => /*#__PURE__*/_jsxDEV(Badge, {\n                className: \"bg-warning text-dark me-2\",\n                children: e\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 173,\n                columnNumber: 19\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 170,\n              columnNumber: 15\n            }, this), isLogedIn && /*#__PURE__*/_jsxDEV(Button, {\n              onClick: () => setShowUpdateModal(true),\n              className: \"pr-2\",\n              children: \"Update\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 178,\n              columnNumber: 31\n            }, this), isLogedIn && /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"danger\",\n              onClick: () => setShowDeleteModal(true),\n              children: \"Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 179,\n              columnNumber: 30\n            }, this), isLogedIn && /*#__PURE__*/_jsxDEV(Button, {\n              onClick: joinBtnHandler,\n              children: \"Join Group\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 182,\n              columnNumber: 30\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        children: /*#__PURE__*/_jsxDEV(Container, {\n          fluid: true,\n          children: [groups.members && /*#__PURE__*/_jsxDEV(\"h4\", {\n            className: \"pt-4\",\n            children: \"Members in group\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(ListGroup, {\n            className: \"pb-4\",\n            children: groups.members && groups.members.map(e => /*#__PURE__*/_jsxDEV(ListGroup.Item, {\n              children: e.username\n            }, e._id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 193,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      show: showUpdateModal,\n      onHide: () => setShowUpdateModal(false),\n      dialogClassName: \"modal-90w\",\n      \"aria-labelledby\": \"example-custom-modal-styling-title\",\n      animation: false,\n      children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n        children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n          id: \"group-update-modal\",\n          children: \"Update Group\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n        children: /*#__PURE__*/_jsxDEV(GroupUpdate, {\n          title: groups.name,\n          type: groups.type,\n          date: groups.time,\n          description: groups.description,\n          tags: groups.tagsArray,\n          id: groups._id,\n          onModalClose: setShowUpdateModal\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      show: showDeleteModal,\n      onHide: () => setShowDeleteModal(false),\n      dialogClassName: \"modal-90w\",\n      \"aria-labelledby\": \"example-custom-modal-styling-title\",\n      animation: false,\n      children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n        children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n          id: \"group-delte-modal\",\n          children: \"Delete Group\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n        children: /*#__PURE__*/_jsxDEV(GroupDelete, {\n          title: groups.name,\n          id: groups._id,\n          onModalClose: setShowDeleteModal //onGroupUpdated={}\n\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(GroupDetails, \"sXyngwXzG1+yZF7MeYsx4WtXlPg=\", false, function () {\n  return [useParams];\n});\n\n_c = GroupDetails;\nexport default GroupDetails;\n\nvar _c;\n\n$RefreshReg$(_c, \"GroupDetails\");","map":{"version":3,"sources":["C:/Users/elorb/Desktop/490repos/CoolCats490/squad-seek/src/pages/GroupDetails.js"],"names":["useParams","axios","useContext","AuthContext","useState","useEffect","Badge","Col","Row","Image","Container","Button","Modal","ListGroup","defaultPic","GroupUpdate","GroupDelete","GroupDetails","props","authCtx","isLogedIn","isLoggedIn","params","groups","setGroups","showUpdateModal","setShowUpdateModal","showDeleteModal","setShowDeleteModal","isLoading","setLoading","userInfo","setUserInfo","fetchGroups","response","groupID","data","err","console","log","fetchUser","get","headers","token","joinBtnHandler","event","alreadyJoined","members","find","x","id","_id","memberInfo","username","push","groupStuff","post","then","res","isYourGroup","createdBy","date","Date","parseInt","time","month","toLocaleString","day","year","getFullYear","toLocaleTimeString","maxHeight","maxWidth","name","type","description","tagsArray","map","e","index"],"mappings":";;;AAAA,SAASA,SAAT,QAA0B,cAA1B;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CACA;;AACA,SAASC,UAAT,QAA2B,OAA3B;AACA,OAAOC,WAAP,MAAwB,uBAAxB,C,CAEA;;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC,C,CACA;;AACA,SACEC,KADF,EAEEC,GAFF,EAGEC,GAHF,EAIEC,KAJF,EAKEC,SALF,EAMEC,MANF,EAOEC,KAPF,EAQEC,SARF,QASO,iBATP,C,CAUA;;AACA,OAAOC,UAAP,MAAuB,2BAAvB,C,CACA;;AACA,OAAOC,WAAP,MAAwB,kCAAxB;AACA,OAAOC,WAAP,MAAwB,kCAAxB;;;;AAEA,MAAMC,YAAY,GAAIC,KAAD,IAAW;AAAA;;AAC9B;AACA,QAAMC,OAAO,GAAGjB,UAAU,CAACC,WAAD,CAA1B;AACA,QAAMiB,SAAS,GAAGD,OAAO,CAACE,UAA1B,CAH8B,CAK9B;;AACA,QAAMC,MAAM,GAAGtB,SAAS,EAAxB,CAN8B,CAQ9B;;AACA,QAAM,CAACuB,MAAD,EAASC,SAAT,IAAsBpB,QAAQ,CAAC,EAAD,CAApC,CAT8B,CAW9B;;AACA,QAAM,CAACqB,eAAD,EAAkBC,kBAAlB,IAAwCtB,QAAQ,CAAC,KAAD,CAAtD,CAZ8B,CAc9B;;AACA,QAAM,CAACuB,eAAD,EAAkBC,kBAAlB,IAAwCxB,QAAQ,CAAC,KAAD,CAAtD,CAf8B,CAiB9B;;AACA,QAAM,CAACyB,SAAD,EAAYC,UAAZ,IAA0B1B,QAAQ,CAAC,IAAD,CAAxC,CAlB8B,CAoB9B;;AACA,QAAM,CAAC2B,QAAD,EAAWC,WAAX,IAA0B5B,QAAQ,CAAC,EAAD,CAAxC,CArB8B,CAuB9B;;AACAC,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,UAAM4B,WAAW,GAAG,YAAY;AAC9B,UAAI;AACF,cAAMC,QAAQ,GAAG,MAAMjC,KAAK,CACzB,oCAAmCqB,MAAM,CAACa,OAAQ,EADzB,CAA5B,CADE,CAIF;;AACAX,QAAAA,SAAS,CAACU,QAAQ,CAACE,IAAV,CAAT;AACAN,QAAAA,UAAU,CAAC,KAAD,CAAV;AACD,OAPD,CAOE,OAAOO,GAAP,EAAY;AACZC,QAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD;AACF,KAXD;;AAaA,UAAMG,SAAS,GAAG,YAAW;AAC3B,UAAG;AACD,cAAMN,QAAQ,GAAG,MAAMjC,KAAK,CAACwC,GAAN,CACxB,gCADwB,EACU;AACjCC,UAAAA,OAAO,EAAE;AACP,4BAAgB,kBADT;AAEPC,YAAAA,KAAK,EAAExB,OAAO,CAACwB;AAFR;AADwB,SADV,CAAvB,CADC,CAQH;;AACAX,QAAAA,WAAW,CAACE,QAAQ,CAACE,IAAV,CAAX;AAEC,OAXD,CAWC,OAAMC,GAAN,EAAU;AACTC,QAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD;AACF,KAfD,CAfc,CA+Bd;;;AACAJ,IAAAA,WAAW;AACX,QAAGb,SAAH,EACEoB,SAAS;AACZ,GAnCQ,EAmCN,CAAClB,MAAD,EAASF,SAAT,EAAoBD,OAAO,CAACwB,KAA5B,CAnCM,CAAT,CAxB8B,CA6D9B;;AACA,MAAId,SAAJ,EAAe;AACb,wBAAO,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AAED,QAAMe,cAAc,GAAIC,KAAD,IAAW;AAEhC,QAAIC,aAAa,GAAGvB,MAAM,CAACwB,OAAP,CAAeC,IAAf,CAAoBC,CAAC,IAAIA,CAAC,CAACC,EAAF,KAASnB,QAAQ,CAACoB,GAA3C,CAApB;;AAEA,QAAG,CAACL,aAAJ,EAAkB;AAChBR,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EADgB,CAGhB;;AACA,UAAIa,UAAU,GAAG;AACfF,QAAAA,EAAE,EAACnB,QAAQ,CAACoB,GADG;AAEfE,QAAAA,QAAQ,EAACtB,QAAQ,CAACsB;AAFH,OAAjB;AAKA9B,MAAAA,MAAM,CAACwB,OAAP,CAAeO,IAAf,CAAoBF,UAApB;AAEA,YAAMG,UAAU,GAAG;AACjBR,QAAAA,OAAO,EAAExB,MAAM,CAACwB;AADC,OAAnB;;AAIA,UAAI;AAAC;AACH9C,QAAAA,KAAK,CAACuD,IAAN,CAAW,2CAAyCjC,MAAM,CAAC4B,GAA3D,EAAgEI,UAAhE,EAA4EE,IAA5E,CAAiFC,GAAG,IAAGpB,OAAO,CAACC,GAAR,CAAYmB,GAAG,CAACtB,IAAhB,CAAvF;AACD,OAFD,CAEE,OAAOC,GAAP,EAAY;AACRC,QAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACL;AAEF;AAEF,GA3BD;;AA6BA,QAAMsB,WAAW,GAAG,MAAI;AACtB,QAAGpC,MAAM,CAACqC,SAAP,IAAoB,IAApB,IAA2BrC,MAAM,CAACqC,SAAP,KAAqB7B,QAAQ,CAACoB,GAA5D,EAAgE;AAC9D,aAAO,IAAP;AACD,KAFD,MAGI;AACF,aAAO,KAAP;AACD;AACF,GAPD,CA/F8B,CAwG9B;;;AACA,MAAIU,IAAI,GAAG,IAAIC,IAAJ,CAASC,QAAQ,CAACxC,MAAM,CAACyC,IAAR,CAAjB,CAAX;AACA,MAAIC,KAAK,GAAGJ,IAAI,CAACK,cAAL,CAAoB,OAApB,EAA6B;AAAED,IAAAA,KAAK,EAAE;AAAT,GAA7B,CAAZ;AACA,MAAIE,GAAG,GAAGN,IAAI,CAACK,cAAL,CAAoB,OAApB,EAA6B;AAAEC,IAAAA,GAAG,EAAE;AAAP,GAA7B,CAAV;AACA,MAAIC,IAAI,GAAGP,IAAI,CAACQ,WAAL,EAAX;AACA,MAAIL,IAAI,GAAGH,IAAI,CAACS,kBAAL,CAAwB,OAAxB,CAAX,CA7G8B,CA+G9B;;AACAhC,EAAAA,OAAO,CAACC,GAAR,CAAYhB,MAAZ;AAEA,sBACE;AAAA,4BACE,QAAC,SAAD;AAAW,MAAA,SAAS,EAAC,yBAArB;AAAA,8BACE,QAAC,GAAD;AAAK,QAAA,SAAS,EAAC,MAAf;AAAA,gCACE,QAAC,GAAD;AAAA,iCACE,QAAC,KAAD;AACE,YAAA,KAAK,EAAE;AAAEgD,cAAAA,SAAS,EAAE,OAAb;AAAsBC,cAAAA,QAAQ,EAAE;AAAhC,aADT;AAEE,YAAA,GAAG,EAAE1D,UAFP;AAGE,YAAA,OAAO;AAHT;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBADF,eAQE,QAAC,GAAD;AAAA,iCACE;AAAA,oCACE;AAAA,sCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,OACiCS,MAAM,CAACkD,IADxC;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,eAOE;AAAA,sCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,EAC+B,GAD/B,EAEGV,QAAQ,CAACxC,MAAM,CAACmD,IAAR,CAAR,GAAwB,QAAxB,GAAmC,WAFtC,EAEmD,GAFnD;AAAA;AAAA;AAAA;AAAA;AAAA,oBAPF,eAWE;AAAA,sCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,EACyB,GADzB,EAEGT,KAAK,GAAG,GAAR,GAAcE,GAAd,GAAoB,IAApB,GAA2BC,IAA3B,GAAkC,KAAlC,GAA0CJ,IAF7C;AAAA;AAAA;AAAA;AAAA;AAAA,oBAXF,eAeE;AAAA,sCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,OACiCzC,MAAM,CAACoD,WADxC;AAAA;AAAA;AAAA;AAAA;AAAA,oBAfF,eAkBE;AAAA,sCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,EAEGpD,MAAM,CAACqD,SAAP,CAAiBC,GAAjB,CAAqB,CAACC,CAAD,EAAIC,KAAJ,kBACpB,QAAC,KAAD;AAAO,gBAAA,SAAS,EAAC,2BAAjB;AAAA,0BACGD;AADH,iBAAkDC,KAAlD;AAAA;AAAA;AAAA;AAAA,sBADD,CAFH;AAAA;AAAA;AAAA;AAAA;AAAA,oBAlBF,EA0BG3D,SAAS,iBAAM,QAAC,MAAD;AAAQ,cAAA,OAAO,EAAE,MAAMM,kBAAkB,CAAC,IAAD,CAAzC;AAAiD,cAAA,SAAS,EAAC,MAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBA1BlB,EA2BGN,SAAS,iBAAK,QAAC,MAAD;AAAQ,cAAA,OAAO,EAAC,QAAhB;AAAyB,cAAA,OAAO,EAAE,MAAMQ,kBAAkB,CAAC,IAAD,CAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBA3BjB,EA8BGR,SAAS,iBAAK,QAAC,MAAD;AAAQ,cAAA,OAAO,EAAEwB,cAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBA9BjB;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBARF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eA4CE,QAAC,GAAD;AAAA,+BACA,QAAC,SAAD;AAAW,UAAA,KAAK,MAAhB;AAAA,qBACCrB,MAAM,CAACwB,OAAP,iBAAmB;AAAI,YAAA,SAAS,EAAC,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADpB,eAEA,QAAC,SAAD;AAAW,YAAA,SAAS,EAAC,MAArB;AAAA,sBAEMxB,MAAM,CAACwB,OAAP,IACAxB,MAAM,CAACwB,OAAP,CAAe8B,GAAf,CAAoBC,CAAD,iBACjB,QAAC,SAAD,CAAW,IAAX;AAAA,wBAA6BA,CAAC,CAACzB;AAA/B,eAAqByB,CAAC,CAAC3B,GAAvB;AAAA;AAAA;AAAA;AAAA,oBADF;AAHN;AAAA;AAAA;AAAA;AAAA,kBAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,cA5CF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAgEE,QAAC,KAAD;AACE,MAAA,IAAI,EAAE1B,eADR;AAEE,MAAA,MAAM,EAAE,MAAMC,kBAAkB,CAAC,KAAD,CAFlC;AAGE,MAAA,eAAe,EAAC,WAHlB;AAIE,yBAAgB,oCAJlB;AAKE,MAAA,SAAS,EAAE,KALb;AAAA,8BAOE,QAAC,KAAD,CAAO,MAAP;AAAA,+BACE,QAAC,KAAD,CAAO,KAAP;AAAa,UAAA,EAAE,EAAC,oBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAPF,eAUE,QAAC,KAAD,CAAO,IAAP;AAAA,+BACE,QAAC,WAAD;AACE,UAAA,KAAK,EAAEH,MAAM,CAACkD,IADhB;AAEE,UAAA,IAAI,EAAElD,MAAM,CAACmD,IAFf;AAGE,UAAA,IAAI,EAAEnD,MAAM,CAACyC,IAHf;AAIE,UAAA,WAAW,EAAEzC,MAAM,CAACoD,WAJtB;AAKE,UAAA,IAAI,EAAEpD,MAAM,CAACqD,SALf;AAME,UAAA,EAAE,EAAErD,MAAM,CAAC4B,GANb;AAOE,UAAA,YAAY,EAAEzB;AAPhB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAVF;AAAA;AAAA;AAAA;AAAA;AAAA,YAhEF,eAuFE,QAAC,KAAD;AACE,MAAA,IAAI,EAAEC,eADR;AAEE,MAAA,MAAM,EAAE,MAAMC,kBAAkB,CAAC,KAAD,CAFlC;AAGE,MAAA,eAAe,EAAC,WAHlB;AAIE,yBAAgB,oCAJlB;AAKE,MAAA,SAAS,EAAE,KALb;AAAA,8BAOE,QAAC,KAAD,CAAO,MAAP;AAAA,+BACE,QAAC,KAAD,CAAO,KAAP;AAAa,UAAA,EAAE,EAAC,mBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAPF,eAUE,QAAC,KAAD,CAAO,IAAP;AAAA,+BACE,QAAC,WAAD;AACE,UAAA,KAAK,EAAEL,MAAM,CAACkD,IADhB;AAEE,UAAA,EAAE,EAAElD,MAAM,CAAC4B,GAFb;AAGE,UAAA,YAAY,EAAEvB,kBAHhB,CAIE;;AAJF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAVF;AAAA;AAAA;AAAA;AAAA;AAAA,YAvFF;AAAA,kBADF;AA6GD,CA/ND;;GAAMX,Y;UAMWjB,S;;;KANXiB,Y;AAiON,eAAeA,YAAf","sourcesContent":["import { useParams } from \"react-router\";\r\nimport axios from \"axios\";\r\n//token stuff\r\nimport { useContext } from \"react\";\r\nimport AuthContext from \"../Store/auth-context\";\r\n\r\n//react imports\r\nimport { useState, useEffect } from \"react\";\r\n//Styling\r\nimport {\r\n  Badge,\r\n  Col,\r\n  Row,\r\n  Image,\r\n  Container,\r\n  Button,\r\n  Modal,\r\n  ListGroup\r\n} from \"react-bootstrap\";\r\n//pic\r\nimport defaultPic from \"./Media/group-defualt.jpg\";\r\n//Components\r\nimport GroupUpdate from \"../Components/groups/GroupUpdate\";\r\nimport GroupDelete from \"../Components/groups/GroupDelete\";\r\n\r\nconst GroupDetails = (props) => {\r\n  //token stuff\r\n  const authCtx = useContext(AuthContext);\r\n  const isLogedIn = authCtx.isLoggedIn;\r\n\r\n  //get the id from the url using params\r\n  const params = useParams();\r\n\r\n  //groups object and setter here\r\n  const [groups, setGroups] = useState([]);\r\n\r\n  //use useState to store and set if the update group modals is shown\r\n  const [showUpdateModal, setShowUpdateModal] = useState(false);\r\n\r\n  //use useState to store and set if the update group modals is shown\r\n  const [showDeleteModal, setShowDeleteModal] = useState(false);\r\n\r\n  //use useState to store if the data is still being fetched from the server\r\n  const [isLoading, setLoading] = useState(true);\r\n\r\n  //Use useState to store user info from server\r\n  const [userInfo, setUserInfo] = useState([]);\r\n\r\n  //useEffect hook will load groups from data base when component is loaded\r\n  useEffect(() => {\r\n    //async call to database\r\n    const fetchGroups = async () => {\r\n      try {\r\n        const response = await axios(\r\n          `http://localhost:5000/activities/${params.groupID}`\r\n        );\r\n        //store groups in groups object\r\n        setGroups(response.data);\r\n        setLoading(false);\r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n    };\r\n\r\n    const fetchUser = async () =>{\r\n      try{\r\n        const response = await axios.get\r\n      (\"http://localhost:5000/users/me\", {\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          token: authCtx.token,\r\n        },\r\n      });\r\n      //store user info in user object\r\n      setUserInfo(response.data)\r\n\r\n      }catch(err){\r\n        console.log(err);\r\n      }\r\n    }\r\n    //Call async function\r\n    fetchGroups();\r\n    if(isLogedIn)\r\n      fetchUser();\r\n  }, [params, isLogedIn, authCtx.token]);\r\n\r\n  //if data is not loaded will retrun a blank page saying loading\r\n  if (isLoading) {\r\n    return <Container>Data is Loading</Container>;\r\n  }\r\n\r\n  const joinBtnHandler = (event) => {\r\n\r\n    let alreadyJoined = groups.members.find(x => x.id === userInfo._id)\r\n\r\n    if(!alreadyJoined){\r\n      console.log(\"not in group\")\r\n\r\n      //get user stuff\r\n      let memberInfo = {\r\n        id:userInfo._id,\r\n        username:userInfo.username\r\n      }\r\n\r\n      groups.members.push(memberInfo)\r\n\r\n      const groupStuff = {\r\n        members: groups.members\r\n      }\r\n  \r\n      try {//http://localhost:5000/activities/join/:id\r\n        axios.post('http://localhost:5000/activities/join/'+groups._id, groupStuff).then(res=> console.log(res.data));\r\n      } catch (err) {\r\n            console.log(err);\r\n      }\r\n\r\n    }\r\n\r\n  };\r\n\r\n  const isYourGroup = ()=>{\r\n    if(groups.createdBy != null &&groups.createdBy === userInfo._id){\r\n      return true;\r\n    }\r\n    else{\r\n      return false;\r\n    }\r\n  }\r\n\r\n  //Date stuff\r\n  let date = new Date(parseInt(groups.time));\r\n  let month = date.toLocaleString(\"en-US\", { month: \"long\" });\r\n  let day = date.toLocaleString(\"en-US\", { day: \"2-digit\" });\r\n  let year = date.getFullYear();\r\n  let time = date.toLocaleTimeString(\"en-US\");\r\n\r\n  //console.log(\"group id \"+groups.createdBy)\r\n  console.log(groups)\r\n\r\n  return (\r\n    <>\r\n      <Container className=\"text-light bg-secondary\">\r\n        <Row className=\"pt-4\">\r\n          <Col>\r\n            <Image\r\n              style={{ maxHeight: \"300px\", maxWidth: \"500px\" }}\r\n              src={defaultPic}\r\n              rounded\r\n            />\r\n          </Col>\r\n          <Col>\r\n            <section>\r\n              <h2>\r\n                <strong>Group Title:</strong> {groups.name}\r\n              </h2>\r\n              {/* {groups.createdBy !=null &&(<p>\r\n                <strong>Group Started by:</strong> {groups.createdBy[0].username}\r\n              </p>)} */}\r\n              <p>\r\n                <strong>Group Type:</strong>{\" \"}\r\n                {parseInt(groups.type) ? \"Online\" : \"In Person\"}{\" \"}\r\n              </p>\r\n              <p>\r\n                <strong>Date:</strong>{\" \"}\r\n                {month + \" \" + day + \", \" + year + \" @ \" + time}\r\n              </p>\r\n              <p>\r\n                <strong>Description:</strong> {groups.description}\r\n              </p>\r\n              <p>\r\n                <strong>Tags: </strong>\r\n                {groups.tagsArray.map((e, index) => (\r\n                  <Badge className=\"bg-warning text-dark me-2\" key={index}>\r\n                    {e}\r\n                  </Badge>\r\n                ))}\r\n              </p>\r\n              {isLogedIn &&  (<Button onClick={() => setShowUpdateModal(true)} className=\"pr-2\">Update</Button>)}\r\n              {isLogedIn && (<Button variant=\"danger\" onClick={() => setShowDeleteModal(true)}>\r\n                Delete\r\n              </Button>)}\r\n              {isLogedIn && (<Button onClick={joinBtnHandler}>Join Group</Button>)}\r\n            </section>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n        <Container fluid >\r\n        {groups.members && (<h4 className=\"pt-4\">Members in group</h4>)}\r\n        <ListGroup className=\"pb-4\">\r\n          {\r\n              groups.members && \r\n              groups.members.map((e) =>(\r\n                <ListGroup.Item key={e._id}>{e.username}</ListGroup.Item>\r\n              )\r\n              )\r\n          }\r\n\r\n        </ListGroup>\r\n\r\n        </Container>\r\n        </Row>\r\n      </Container>\r\n\r\n      {/*Update Modal/Popup window settings start here                 */}\r\n      <Modal\r\n        show={showUpdateModal}\r\n        onHide={() => setShowUpdateModal(false)}\r\n        dialogClassName=\"modal-90w\"\r\n        aria-labelledby=\"example-custom-modal-styling-title\"\r\n        animation={false}\r\n      >\r\n        <Modal.Header>\r\n          <Modal.Title id=\"group-update-modal\">Update Group</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <GroupUpdate\r\n            title={groups.name}\r\n            type={groups.type}\r\n            date={groups.time}\r\n            description={groups.description}\r\n            tags={groups.tagsArray}\r\n            id={groups._id}\r\n            onModalClose={setShowUpdateModal}\r\n          />\r\n        </Modal.Body>\r\n      </Modal>\r\n\r\n      <Modal\r\n        show={showDeleteModal}\r\n        onHide={() => setShowDeleteModal(false)}\r\n        dialogClassName=\"modal-90w\"\r\n        aria-labelledby=\"example-custom-modal-styling-title\"\r\n        animation={false}\r\n      >\r\n        <Modal.Header>\r\n          <Modal.Title id=\"group-delte-modal\">Delete Group</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <GroupDelete\r\n            title={groups.name}\r\n            id={groups._id}\r\n            onModalClose={setShowDeleteModal}\r\n            //onGroupUpdated={}\r\n          />\r\n        </Modal.Body>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GroupDetails;\r\n"]},"metadata":{},"sourceType":"module"}