{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\elorb\\\\Desktop\\\\erics_repos\\\\CoolCats490\\\\squad-seek\\\\src\\\\pages\\\\TagList.js\",\n    _s = $RefreshSig$();\n\n//React hooks\nimport { useState, useEffect, useContext, useCallback } from \"react\"; //\n\nimport axios from \"axios\";\nimport { Container } from \"react-bootstrap\";\nimport TagListItem from \"../Components/Tags/TagListItem\"; //user token stuff\n\nimport AuthContext from \"../Store/auth-context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TagList = () => {\n  _s();\n\n  //gett user token and checking if the user is logged in\n  const authCtx = useContext(AuthContext);\n  const isLogedIn = authCtx.isLoggedIn; //use useState to store various data\n\n  const [tags, setTags] = useState([]);\n  const [userInfo, setUserInfo] = useState([]); //const [doneLoading, setLoading] = useState(false);\n  //Use useState to store when data is changed\n\n  const [dataChanged, setDataChanged] = useState(false);\n  const loadData = useCallback(async () => {\n    //async call to database\n    let fetchTags = async () => {\n      try {\n        const response = await axios(\"http://localhost:5000/tags\"); //store groups in groups object\n\n        setTags(response.data);\n      } catch (err) {\n        console.log(err);\n      }\n    };\n\n    let fetchUser = async () => {\n      try {\n        const response = await axios.get(\"http://localhost:5000/users/me\", {\n          headers: {\n            \"Content-Type\": \"application/json\",\n            token: authCtx.token\n          }\n        }); //store user info in user object\n\n        setUserInfo(response.data); //setLoading(true);\n      } catch (err) {\n        console.log(err); //setLoading(false);\n      }\n    }; //Call async function\n\n\n    fetchTags();\n\n    if (isLogedIn) {\n      fetchUser();\n    } //set loading to false\n    //setLoading(true)\n\n  }, [authCtx.token, isLogedIn]); //dataChanged\n  //useEffect hook will load groups from data base when component is loaded\n\n  useEffect(() => {\n    loadData();\n    setDataChanged(false);\n  }, [loadData, dataChanged]); //Sort the tags in alphabetical order\n\n  tags.sort((x, y) => x.tagName > y.tagName ? 1 : -1);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: tags.filter(x => x.groups.length > 0).map(tag => /*#__PURE__*/_jsxDEV(TagListItem, {\n      tagName: tag.tagName,\n      id: tag._id,\n      groups: tag.groups,\n      users: tag.users,\n      userInfo: userInfo,\n      onDataChanged: setDataChanged\n    }, tag._id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 9\n  }, this);\n};\n\n_s(TagList, \"YLqwxHkLkkvRUagsUW/KZIEXhiU=\");\n\n_c = TagList;\nexport default TagList;\n\nvar _c;\n\n$RefreshReg$(_c, \"TagList\");","map":{"version":3,"sources":["C:/Users/elorb/Desktop/erics_repos/CoolCats490/squad-seek/src/pages/TagList.js"],"names":["useState","useEffect","useContext","useCallback","axios","Container","TagListItem","AuthContext","TagList","authCtx","isLogedIn","isLoggedIn","tags","setTags","userInfo","setUserInfo","dataChanged","setDataChanged","loadData","fetchTags","response","data","err","console","log","fetchUser","get","headers","token","sort","x","y","tagName","filter","groups","length","map","tag","_id","users"],"mappings":"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","sourcesContent":["//React hooks\r\nimport { useState, useEffect, useContext, useCallback} from \"react\";\r\n//\r\nimport axios from \"axios\";\r\n\r\nimport { Container } from \"react-bootstrap\";\r\nimport TagListItem from \"../Components/Tags/TagListItem\";\r\n//user token stuff\r\nimport AuthContext from \"../Store/auth-context\";\r\n\r\nconst TagList = () => {\r\n\r\n  //gett user token and checking if the user is logged in\r\n  const authCtx = useContext(AuthContext);\r\n  const isLogedIn = authCtx.isLoggedIn;\r\n\r\n    //use useState to store various data\r\n    const [tags, setTags] = useState([])\r\n    const [userInfo, setUserInfo] = useState([]);\r\n    //const [doneLoading, setLoading] = useState(false);\r\n\r\n    //Use useState to store when data is changed\r\n    const [dataChanged, setDataChanged] = useState(false);\r\n\r\n\r\n    const loadData = useCallback(async () => {\r\n      //async call to database\r\n      let fetchTags = async () => {\r\n        try {\r\n          const response = await axios(\"http://localhost:5000/tags\");\r\n          //store groups in groups object\r\n          setTags(response.data);\r\n        } catch (err) {\r\n          console.log(err);\r\n        }\r\n      };\r\n  \r\n      let fetchUser = async () => {\r\n        try {\r\n          const response = await axios.get(\"http://localhost:5000/users/me\", {\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n              token: authCtx.token,\r\n            },\r\n          });\r\n          //store user info in user object\r\n          setUserInfo(response.data);\r\n          //setLoading(true);\r\n        } catch (err) {\r\n          console.log(err);\r\n          //setLoading(false);\r\n        }\r\n      };\r\n  \r\n      //Call async function\r\n      fetchTags();\r\n      \r\n      if (isLogedIn){\r\n        fetchUser();\r\n      }\r\n  \r\n      //set loading to false\r\n      //setLoading(true)\r\n    }, [authCtx.token, isLogedIn ]);//dataChanged\r\n  \r\n    //useEffect hook will load groups from data base when component is loaded\r\n    useEffect(() => {\r\n      loadData();\r\n      setDataChanged(false);\r\n    }, [loadData, dataChanged]);\r\n    \r\n\r\n      //Sort the tags in alphabetical order\r\n      tags.sort( (x, y) => (x.tagName > y.tagName) ? 1 : -1);\r\n\r\n    return(\r\n        <Container>\r\n            {/* Only list the tags with atleast 1 group */}\r\n            {tags.filter(x => x.groups.length > 0).map( (tag) =>(\r\n                <TagListItem\r\n                  key = {tag._id}\r\n                  tagName = {tag.tagName}\r\n                  id = {tag._id}\r\n                  groups = {tag.groups}\r\n                  users = {tag.users}\r\n                  userInfo={userInfo}\r\n                  onDataChanged={setDataChanged}\r\n                />\r\n            ))}\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default TagList;"]},"metadata":{},"sourceType":"module"}