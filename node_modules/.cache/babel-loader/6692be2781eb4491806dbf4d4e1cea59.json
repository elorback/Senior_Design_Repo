{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\elorb\\\\Desktop\\\\490repos\\\\CoolCats490\\\\squad-seek\\\\src\\\\pages\\\\TagDetails.js\",\n    _s = $RefreshSig$();\n\n//https://stackoverflow.com/questions/60024761/5-responsive-cards-per-row-with-bootstrap-4\n//\nimport { useState, useEffect } from \"react\"; //\n\nimport { Badge, Card, Col, Container, Row } from \"react-bootstrap\"; //\n//import AuthContext from \"../Store/auth-context\";\n\nimport axios from \"axios\";\nimport { useParams } from \"react-router-dom\"; //pic\n\nimport defaultPic from \"./Media/group-defualt.jpg\"; //\n\nimport { useHistory } from \"react-router-dom\";\nimport Button from \"@restart/ui/esm/Button\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TagDetails = () => {\n  _s();\n\n  //Use states\n  const [tags, setTags] = useState(null); //const [userInfo, setUserInfo] = useState([]);\n  //token stuff\n  //const authCtx = useContext(AuthContext);\n  //const isLogedIn = authCtx.isLoggedIn;\n  //get the id from the url using params\n\n  const params = useParams(); //Used to link to group page\n\n  const history = useHistory(); //useEffect hook will load groups from data base when component is loaded\n\n  useEffect(() => {\n    const fetchTags = async () => {\n      try {\n        let response = await axios(`http://localhost:5000/tags/${params.tagName}`); //store groups in groups object\n\n        setTags(response.data); //setLoading(true);\n      } catch (err) {\n        console.log(err); //setLoading(false);\n      }\n    }; // let fetchUser = async () => {\n    //   try {\n    //     const response = await axios.get(\"http://localhost:5000/users/me\", {\n    //       headers: {\n    //         \"Content-Type\": \"application/json\",\n    //         token: authCtx.token,\n    //       },\n    //     });\n    //     //store user info in user object\n    //     setUserInfo(response.data);\n    //     setLoading(true);\n    //   } catch (err) {\n    //     console.log(err);\n    //     setLoading(false);\n    //   }\n    // };\n\n\n    fetchTags(); //setLoading(false);\n  }, [params.tagName]);\n\n  const viewGroupsHandler = param => event => {\n    //link to the group page using it's id\n    history.push(\"/groups/\" + param);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-light text-center text-capitalize\",\n      children: params.tagName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      className: \"text-dark\",\n      children: /*#__PURE__*/_jsxDEV(Row, {\n        className: \"row-cols-md-2 row-cols-lg-3\",\n        children: tags && tags[0].groups.map((element, num) => /*#__PURE__*/_jsxDEV(Col, {\n          className: \"mt-4\",\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            border: \"primary\",\n            children: [/*#__PURE__*/_jsxDEV(Card.Img, {\n              variant: \"top\",\n              src: defaultPic\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Card.Header, {\n              className: \"text-center\",\n              children: element.groupName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Card.Body, {\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Group Type\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 90,\n                  columnNumber: 22\n                }, this), \": \", parseInt(element.groupType) ? \"In Person\" : \"Online\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 90,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Group Date\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 91,\n                  columnNumber: 22\n                }, this), \":\", new Date(parseInt(element.groupTime)).toLocaleDateString()]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 91,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Group Memebers\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 96,\n                  columnNumber: 22\n                }, this), \":\", /*#__PURE__*/_jsxDEV(Badge, {\n                  bg: \"info\",\n                  children: element.groupMembers.length\n                }, num, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 97,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 96,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              className: \"bg-primary text-light\",\n              onClick: e => viewGroupsHandler(element.groupId)(e),\n              children: \"View Group\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 15\n            }, this)]\n          }, element.groupId, true, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 13\n          }, this)\n        }, element._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TagDetails, \"hZwKZmS7ldTEU+zK8DnJGGnE4Vs=\", false, function () {\n  return [useParams, useHistory];\n});\n\n_c = TagDetails;\nexport default TagDetails;\n\nvar _c;\n\n$RefreshReg$(_c, \"TagDetails\");","map":{"version":3,"sources":["C:/Users/elorb/Desktop/490repos/CoolCats490/squad-seek/src/pages/TagDetails.js"],"names":["useState","useEffect","Badge","Card","Col","Container","Row","axios","useParams","defaultPic","useHistory","Button","TagDetails","tags","setTags","params","history","fetchTags","response","tagName","data","err","console","log","viewGroupsHandler","param","event","push","groups","map","element","num","groupName","parseInt","groupType","Date","groupTime","toLocaleDateString","groupMembers","length","e","groupId","_id"],"mappings":";;;AAAA;AACA;AACA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC,C,CACA;;AACA,SAASC,KAAT,EAAgBC,IAAhB,EAAsBC,GAAtB,EAA2BC,SAA3B,EAAsCC,GAAtC,QAAiD,iBAAjD,C,CACA;AACA;;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,kBAA1B,C,CACA;;AACA,OAAOC,UAAP,MAAuB,2BAAvB,C,CACA;;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,OAAOC,MAAP,MAAmB,wBAAnB;;;AAEA,MAAMC,UAAU,GAAG,MAAM;AAAA;;AACvB;AACA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBd,QAAQ,CAAC,IAAD,CAAhC,CAFuB,CAGvB;AAEA;AACA;AACA;AAEA;;AACA,QAAMe,MAAM,GAAGP,SAAS,EAAxB,CAVuB,CAYvB;;AACA,QAAMQ,OAAO,GAAGN,UAAU,EAA1B,CAbuB,CAevB;;AACAT,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMgB,SAAS,GAAG,YAAY;AAC5B,UAAI;AACF,YAAIC,QAAQ,GAAG,MAAMX,KAAK,CACvB,8BAA6BQ,MAAM,CAACI,OAAQ,EADrB,CAA1B,CADE,CAIF;;AACAL,QAAAA,OAAO,CAACI,QAAQ,CAACE,IAAV,CAAP,CALE,CAMF;AACD,OAPD,CAOE,OAAOC,GAAP,EAAY;AACZC,QAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ,EADY,CAEZ;AACD;AACF,KAZD,CADc,CAed;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAJ,IAAAA,SAAS,GAhCK,CAkCd;AACD,GAnCQ,EAmCN,CAACF,MAAM,CAACI,OAAR,CAnCM,CAAT;;AAqCA,QAAMK,iBAAiB,GAAGC,KAAK,IAAIC,KAAK,IAAI;AAC1C;AACAV,IAAAA,OAAO,CAACW,IAAR,CAAa,aAAYF,KAAzB;AACD,GAHD;;AAKA,sBACE,QAAC,SAAD;AAAA,4BACE;AAAI,MAAA,SAAS,EAAC,wCAAd;AAAA,gBACGV,MAAM,CAACI;AADV;AAAA;AAAA;AAAA;AAAA,YADF,eAIE,QAAC,SAAD;AAAW,MAAA,SAAS,EAAC,WAArB;AAAA,6BACE,QAAC,GAAD;AAAK,QAAA,SAAS,EAAC,6BAAf;AAAA,kBACGN,IAAI,IAAIA,IAAI,CAAC,CAAD,CAAJ,CAAQe,MAAR,CAAeC,GAAf,CAAmB,CAACC,OAAD,EAASC,GAAT,kBAI1B,QAAC,GAAD;AAAK,UAAA,SAAS,EAAC,MAAf;AAAA,iCACA,QAAC,IAAD;AAAM,YAAA,MAAM,EAAC,SAAb;AAAA,oCACE,QAAC,IAAD,CAAM,GAAN;AAAU,cAAA,OAAO,EAAC,KAAlB;AAAwB,cAAA,GAAG,EAAEtB;AAA7B;AAAA;AAAA;AAAA;AAAA,oBADF,eAEE,QAAC,IAAD,CAAM,MAAN;AAAa,cAAA,SAAS,EAAC,aAAvB;AAAA,wBAAsCqB,OAAO,CAACE;AAA9C;AAAA;AAAA;AAAA;AAAA,oBAFF,eAGE,QAAC,IAAD,CAAM,IAAN;AAAA,sCACE;AAAA,wCAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAL,QAAmCC,QAAQ,CAACH,OAAO,CAACI,SAAT,CAAR,GAA6B,WAA7B,GAAyC,QAA5E;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,eAEE;AAAA,wCAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAL,OAEM,IAAIC,IAAJ,CAASF,QAAQ,CAACH,OAAO,CAACM,SAAT,CAAjB,EAAsCC,kBAAtC,EAFN;AAAA;AAAA;AAAA;AAAA;AAAA,sBAFF,eAOE;AAAA,wCAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAL,oBACI,QAAC,KAAD;AAAO,kBAAA,EAAE,EAAC,MAAV;AAAA,4BAA4BP,OAAO,CAACQ,YAAR,CAAqBC;AAAjD,mBAAsBR,GAAtB;AAAA;AAAA;AAAA;AAAA,wBADJ;AAAA;AAAA;AAAA;AAAA;AAAA,sBAPF;AAAA;AAAA;AAAA;AAAA;AAAA,oBAHF,eAcE,QAAC,MAAD;AAAQ,cAAA,SAAS,EAAC,uBAAlB;AAA0C,cAAA,OAAO,EAAGS,CAAD,IAAOhB,iBAAiB,CAACM,OAAO,CAACW,OAAT,CAAjB,CAAmCD,CAAnC,CAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAdF;AAAA,aAA4BV,OAAO,CAACW,OAApC;AAAA;AAAA;AAAA;AAAA;AADA,WAA2BX,OAAO,CAACY,GAAnC;AAAA;AAAA;AAAA;AAAA,gBAJO;AADX;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAJF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAmCD,CA7FD;;GAAM9B,U;UAUWJ,S,EAGCE,U;;;KAbZE,U;AA+FN,eAAeA,UAAf","sourcesContent":["//https://stackoverflow.com/questions/60024761/5-responsive-cards-per-row-with-bootstrap-4\r\n//\r\nimport { useState, useEffect } from \"react\";\r\n//\r\nimport { Badge, Card, Col, Container, Row } from \"react-bootstrap\";\r\n//\r\n//import AuthContext from \"../Store/auth-context\";\r\nimport axios from \"axios\";\r\nimport { useParams } from \"react-router-dom\";\r\n//pic\r\nimport defaultPic from \"./Media/group-defualt.jpg\";\r\n//\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Button from \"@restart/ui/esm/Button\";\r\n\r\nconst TagDetails = () => {\r\n  //Use states\r\n  const [tags, setTags] = useState(null);\r\n  //const [userInfo, setUserInfo] = useState([]);\r\n\r\n  //token stuff\r\n  //const authCtx = useContext(AuthContext);\r\n  //const isLogedIn = authCtx.isLoggedIn;\r\n\r\n  //get the id from the url using params\r\n  const params = useParams();\r\n\r\n  //Used to link to group page\r\n  const history = useHistory();\r\n\r\n  //useEffect hook will load groups from data base when component is loaded\r\n  useEffect(() => {\r\n    const fetchTags = async () => {\r\n      try {\r\n        let response = await axios(\r\n          `http://localhost:5000/tags/${params.tagName}`\r\n        );\r\n        //store groups in groups object\r\n        setTags(response.data);\r\n        //setLoading(true);\r\n      } catch (err) {\r\n        console.log(err);\r\n        //setLoading(false);\r\n      }\r\n    };\r\n\r\n    // let fetchUser = async () => {\r\n    //   try {\r\n    //     const response = await axios.get(\"http://localhost:5000/users/me\", {\r\n    //       headers: {\r\n    //         \"Content-Type\": \"application/json\",\r\n    //         token: authCtx.token,\r\n    //       },\r\n    //     });\r\n    //     //store user info in user object\r\n    //     setUserInfo(response.data);\r\n    //     setLoading(true);\r\n    //   } catch (err) {\r\n    //     console.log(err);\r\n    //     setLoading(false);\r\n    //   }\r\n    // };\r\n\r\n    fetchTags();\r\n\r\n    //setLoading(false);\r\n  }, [params.tagName]);\r\n\r\n  const viewGroupsHandler = param => event => {\r\n    //link to the group page using it's id\r\n    history.push(\"/groups/\"+ param)\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <h2 className=\"text-light text-center text-capitalize\">\r\n        {params.tagName}\r\n      </h2>\r\n      <Container className=\"text-dark\">\r\n        <Row className=\"row-cols-md-2 row-cols-lg-3\">\r\n          {tags && tags[0].groups.map((element,num) =>\r\n            \r\n              \r\n              (\r\n            <Col className=\"mt-4\" key={element._id}>\r\n            <Card border=\"primary\" key={element.groupId}>\r\n              <Card.Img variant=\"top\" src={defaultPic} />\r\n              <Card.Header className=\"text-center\">{element.groupName}</Card.Header>\r\n              <Card.Body>\r\n                <div><strong>Group Type</strong>: {parseInt(element.groupType)? \"In Person\":\"Online\"}</div>\r\n                <div><strong>Group Date</strong>:\r\n                    \r\n                    { new Date(parseInt(element.groupTime)).toLocaleDateString()}\r\n                   \r\n                   </div>\r\n                <div><strong>Group Memebers</strong>:{(\r\n                    <Badge bg=\"info\" key={num}>{element.groupMembers.length}</Badge>\r\n                  )}</div>\r\n              </Card.Body>\r\n              <Button className=\"bg-primary text-light\" onClick={(e) => viewGroupsHandler(element.groupId)(e)}>View Group</Button>\r\n            </Card>\r\n          </Col>\r\n          ))}\r\n          \r\n        </Row>\r\n      </Container>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default TagDetails;\r\n"]},"metadata":{},"sourceType":"module"}