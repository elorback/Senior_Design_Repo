{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\elorb\\\\Desktop\\\\erics_repos\\\\CoolCats490\\\\squad-seek\\\\src\\\\pages\\\\GroupDetails.js\",\n    _s = $RefreshSig$();\n\nimport { useParams } from \"react-router\";\nimport axios from \"axios\"; //User token stuff\n\nimport { useContext } from \"react\";\nimport AuthContext from \"../Store/auth-context\"; //react imports\n\nimport { useState, useEffect, useCallback } from \"react\"; //Styling\n\nimport { Col, Row, Image, Container } from \"react-bootstrap\";\nimport \"bootstrap/dist/css/bootstrap.min.css\"; //pic\n\nimport defaultPic from \"./Media/group-defualt.jpg\"; //Components\n\nimport GroupCommentPost from \"../Components/groups/groupDetails/GroupCommentPost\";\nimport GroupCommentList from \"../Components/groups/groupDetails/GroupCommentList\";\nimport GroupInfo from \"../Components/groups/groupDetails/GroupInfo\";\nimport GroupMembers from \"../Components/groups/groupDetails/GroupMembers\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst GroupDetails = props => {\n  _s();\n\n  //token stuff\n  const authCtx = useContext(AuthContext);\n  const isLogedIn = authCtx.isLoggedIn; //get the id from the url using params\n\n  const params = useParams(); //groups object and setter here\n\n  const [groups, setGroups] = useState([]); //use useState to store if the data is still being fetched from the server\n\n  const [doneLoading, setLoading] = useState(false); //Use useState to store user info from server\n\n  const [userInfo, setUserInfo] = useState([]); //Use useState to store when data is changed\n\n  const [dataChanged, setDataChanged] = useState(false);\n  const [userComments, setComments] = useState([]); //Load group and user data from the database\n\n  const loadData = useCallback(async () => {\n    //async call to database\n    const fetchGroups = async () => {\n      try {\n        let response = await axios(`http://localhost:5000/activities/${params.groupID}`); //store groups in groups object\n\n        setGroups(response.data);\n        setLoading(true);\n      } catch (err) {\n        console.log(err);\n        setLoading(false);\n      }\n    };\n\n    let fetchUser = async () => {\n      try {\n        const response = await axios.get(\"http://localhost:5000/users/me\", {\n          headers: {\n            \"Content-Type\": \"application/json\",\n            token: authCtx.token\n          }\n        }); //store user info in user object\n\n        setUserInfo(response.data);\n        setLoading(true);\n      } catch (err) {\n        console.log(err);\n        setLoading(false);\n      }\n    };\n\n    let fetchComments = async () => {\n      try {\n        let response = await axios(`http://localhost:5000/comments/get/${params.groupID}`); //store comments in comments object\n\n        setComments(response.data);\n        setLoading(true);\n      } catch (err) {\n        console.log(err);\n        setLoading(false);\n      }\n    }; //Call async function\n\n\n    fetchGroups();\n    if (isLogedIn) fetchUser();\n    fetchComments(); //set loading to false\n    //setLoading(true)\n  }, [params, authCtx.token, isLogedIn]); //dataChanged\n  //useEffect hook will load groups from data base when component is loaded\n\n  useEffect(() => {\n    loadData();\n    setDataChanged(false);\n  }, [loadData, dataChanged]); //if data is not loaded will retrun a blank page saying loading\n  // if (isLoading === true) {\n  //   return <Container>Data is Loading</Container>;\n  // }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      className: \"text-light bg-secondary pb-4\",\n      children: [/*#__PURE__*/_jsxDEV(Row, {\n        className: \"pt-4\",\n        children: [/*#__PURE__*/_jsxDEV(Col, {\n          children: /*#__PURE__*/_jsxDEV(Image, {\n            style: {\n              maxHeight: \"300px\",\n              maxWidth: \"500px\"\n            },\n            src: defaultPic,\n            rounded: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          children: doneLoading && /*#__PURE__*/_jsxDEV(GroupInfo, {\n            groups: groups,\n            userInfo: userInfo,\n            onDataChanged: setDataChanged\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        children: /*#__PURE__*/_jsxDEV(Container, {\n          fluid: true,\n          className: \"pt-4\",\n          children: [/*#__PURE__*/_jsxDEV(GroupMembers, {\n            groups: groups,\n            onDataChanged: setDataChanged\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 13\n          }, this), doneLoading && /*#__PURE__*/_jsxDEV(GroupCommentPost, {\n            groupInfo: groups,\n            userInfo: userInfo,\n            userComments: userComments,\n            onDataChanged: setDataChanged\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(GroupCommentList, {\n            userInfo: userInfo,\n            userComments: userComments,\n            onDataChanged: setDataChanged\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(GroupDetails, \"/ARFCLLkRoucP1DjMv/27f/1oVM=\", false, function () {\n  return [useParams];\n});\n\n_c = GroupDetails;\nexport default GroupDetails;\n\nvar _c;\n\n$RefreshReg$(_c, \"GroupDetails\");","map":{"version":3,"sources":["C:/Users/elorb/Desktop/erics_repos/CoolCats490/squad-seek/src/pages/GroupDetails.js"],"names":["useParams","axios","useContext","AuthContext","useState","useEffect","useCallback","Col","Row","Image","Container","defaultPic","GroupCommentPost","GroupCommentList","GroupInfo","GroupMembers","GroupDetails","props","authCtx","isLogedIn","isLoggedIn","params","groups","setGroups","doneLoading","setLoading","userInfo","setUserInfo","dataChanged","setDataChanged","userComments","setComments","loadData","fetchGroups","response","groupID","data","err","console","log","fetchUser","get","headers","token","fetchComments","maxHeight","maxWidth"],"mappings":"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","sourcesContent":["import { useParams } from \"react-router\";\r\nimport axios from \"axios\";\r\n//User token stuff\r\nimport { useContext } from \"react\";\r\nimport AuthContext from \"../Store/auth-context\";\r\n//react imports\r\nimport { useState, useEffect, useCallback } from \"react\";\r\n//Styling\r\nimport { Col, Row, Image, Container } from \"react-bootstrap\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n//pic\r\nimport defaultPic from \"./Media/group-defualt.jpg\";\r\n//Components\r\nimport GroupCommentPost from \"../Components/groups/groupDetails/GroupCommentPost\";\r\nimport GroupCommentList from \"../Components/groups/groupDetails/GroupCommentList\";\r\nimport GroupInfo from \"../Components/groups/groupDetails/GroupInfo\";\r\nimport GroupMembers from \"../Components/groups/groupDetails/GroupMembers\";\r\n\r\nconst GroupDetails = (props) => {\r\n  //token stuff\r\n  const authCtx = useContext(AuthContext);\r\n  const isLogedIn = authCtx.isLoggedIn;\r\n\r\n  //get the id from the url using params\r\n  const params = useParams();\r\n\r\n  //groups object and setter here\r\n  const [groups, setGroups] = useState([]);\r\n\r\n  //use useState to store if the data is still being fetched from the server\r\n  const [doneLoading, setLoading] = useState(false);\r\n\r\n  //Use useState to store user info from server\r\n  const [userInfo, setUserInfo] = useState([]);\r\n\r\n  //Use useState to store when data is changed\r\n  const [dataChanged, setDataChanged] = useState(false);\r\n\r\n\r\n  const [userComments, setComments] = useState([]);\r\n\r\n  //Load group and user data from the database\r\n  const loadData = useCallback(async () => {\r\n    //async call to database\r\n    const fetchGroups = async () => {\r\n      try {\r\n        let response = await axios(\r\n          `http://localhost:5000/activities/${params.groupID}`\r\n        );\r\n        //store groups in groups object\r\n        setGroups(response.data);\r\n        setLoading(true);\r\n      } catch (err) {\r\n        console.log(err);\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    let fetchUser = async () => {\r\n      try {\r\n        const response = await axios.get(\"http://localhost:5000/users/me\", {\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            token: authCtx.token,\r\n          },\r\n        });\r\n        //store user info in user object\r\n        setUserInfo(response.data);\r\n        setLoading(true);\r\n      } catch (err) {\r\n        console.log(err);\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    let fetchComments = async ()=>{\r\n      try{\r\n        let response = await axios(\r\n          `http://localhost:5000/comments/get/${params.groupID}`\r\n        );\r\n        //store comments in comments object\r\n        setComments(response.data);\r\n        setLoading(true);\r\n      }catch (err){\r\n        console.log(err);\r\n        setLoading(false);\r\n      }\r\n    };\r\n    //Call async function\r\n    fetchGroups();\r\n    \r\n    if (isLogedIn) fetchUser();\r\n\r\n    fetchComments();\r\n\r\n    //set loading to false\r\n    //setLoading(true)\r\n  }, [params, authCtx.token, isLogedIn ]);//dataChanged\r\n\r\n  //useEffect hook will load groups from data base when component is loaded\r\n  useEffect(() => {\r\n    loadData();\r\n    setDataChanged(false);\r\n  }, [loadData, dataChanged]);\r\n\r\n  //if data is not loaded will retrun a blank page saying loading\r\n  // if (isLoading === true) {\r\n  //   return <Container>Data is Loading</Container>;\r\n  // }\r\n\r\n\r\n  return (\r\n    <>\r\n      <Container className=\"text-light bg-secondary pb-4\">\r\n        <Row className=\"pt-4\">\r\n          <Col>\r\n            <Image\r\n              style={{ maxHeight: \"300px\", maxWidth: \"500px\" }}\r\n              src={defaultPic}\r\n              rounded\r\n            />\r\n          </Col>\r\n          <Col>\r\n            {doneLoading && <GroupInfo\r\n              groups={groups}\r\n              userInfo={userInfo}\r\n              onDataChanged={setDataChanged}\r\n            />}\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Container fluid className=\"pt-4\">\r\n            \r\n\r\n            <GroupMembers \r\n            groups={groups} \r\n            onDataChanged={setDataChanged}\r\n            />\r\n\r\n            {doneLoading && <GroupCommentPost\r\n              groupInfo={groups}\r\n              userInfo={userInfo}\r\n              userComments={userComments}\r\n              onDataChanged={setDataChanged}\r\n            />}\r\n            <GroupCommentList\r\n              userInfo = {userInfo}\r\n              userComments = {userComments}\r\n              onDataChanged={setDataChanged}\r\n            /> \r\n          </Container>\r\n        </Row>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GroupDetails;\r\n"]},"metadata":{},"sourceType":"module"}